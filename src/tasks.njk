---
layout: layouts/base.njk
title: Tasks
permalink: /tasks/
---
<section class="card">
  <h2 class="text-xl font-semibold">Tasks</h2>
  <div class="mt-3 grid gap-3 sm:grid-cols-3">
    <div>
      <label class="block text-sm font-medium text-gray-700">Status</label>
      <select id="filterStatus" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500">
        <option value="all">All</option>
        <option value="open" selected>Open</option>
        <option value="done">Done</option>
      </select>
    </div>
    <div class="sm:col-span-2">
      <label class="block text-sm font-medium text-gray-700">Room</label>
      <select id="filterRoom" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500">
        <option value="">All rooms</option>
      </select>
    </div>
  </div>
</section>

<section class="card mt-6">
  <h3 class="text-lg font-semibold">Add Task</h3>
  <form id="taskForm" class="mt-3 grid gap-3 sm:grid-cols-3">
    <div class="sm:col-span-2">
      <label class="block text-sm font-medium text-gray-700">Title</label>
      <input id="title" name="title" required class="mt-1 block w-full rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500" />
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Priority</label>
      <select id="priority" name="priority" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500">
        <option value="normal" selected>Normal</option>
        <option value="high">High</option>
        <option value="low">Low</option>
      </select>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Due</label>
      <input id="due_date" name="due_date" type="date" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500" />
    </div>
    <div class="sm:col-span-2">
      <label class="block text-sm font-medium text-gray-700">Room</label>
      <select id="room_id" name="room_id" class="mt-1 block w-full rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500">
        <option value="">No room</option>
      </select>
    </div>
    <div class="sm:col-span-3">
      <button class="btn w-full sm:w-auto" type="submit">Add</button>
    </div>
  </form>
  <p id="msg" class="muted mt-2"></p>
</section>

<section class="card mt-6">
  <h3 class="text-lg font-semibold">List</h3>
  <div id="list" class="mt-3 divide-y divide-gray-200"></div>
</section>

<script>
(async function() {
  const filterStatus = document.getElementById('filterStatus');
  const filterRoom = document.getElementById('filterRoom');
  const roomSelect = document.getElementById('room_id');
  const list = document.getElementById('list');
  const form = document.getElementById('taskForm');
  const msg = document.getElementById('msg');
  let rooms = [];

  async function loadRooms() {
    const r = await fetch('/.netlify/functions/rooms-list');
    if (r.status === 401) { location.href = '/'; return; }
    rooms = await r.json();
    const opts = ['<option value="">All rooms</option>'].concat(rooms.map(r => `<option value="${r.id}">${r.name}</option>`));
    filterRoom.innerHTML = opts.join('');
    const addOpts = ['<option value="">No room</option>'].concat(rooms.map(r => `<option value="${r.id}">${r.name}</option>`));
    roomSelect.innerHTML = addOpts.join('');
  }

  function roomName(id) {
    const rm = rooms.find(r => r.id === id);
    return rm ? rm.name : '';
  }

  async function loadTasks() {
    const params = new URLSearchParams();
    if (filterRoom.value) params.set('room_id', filterRoom.value);
    const r = await fetch('/.netlify/functions/tasks-list' + (params.toString() ? `?${params}` : ''));
    if (r.status === 401) { location.href = '/'; return; }
    let items = await r.json();
    if (filterStatus.value !== 'all') items = items.filter(t => t.status === filterStatus.value);
    list.innerHTML = items.map(t => renderTask(t)).join('') || '<p class="muted">No tasks.</p>';
    list.querySelectorAll('input[type=checkbox][data-id]').forEach(cb => {
      cb.addEventListener('change', async () => {
        const id = cb.getAttribute('data-id');
        const status = cb.checked ? 'done' : 'open';
        const res = await fetch('/.netlify/functions/tasks-upsert', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ id, status }) });
        if (!res.ok) alert('Update failed');
      });
    });
  }

  function renderTask(t) {
    const checked = t.status === 'done' ? 'checked' : '';
    const priorityClass = t.priority === 'high' ? 'bg-red-100 text-red-700' : t.priority === 'low' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700';
    return `<div class=\"py-3 flex items-center justify-between\">
      <div class=\"flex items-start gap-3\">
        <input type=\"checkbox\" ${checked} data-id=\"${t.id}\" class=\"mt-1 h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-600\" />
        <div>
          <div class=\"font-medium\">${t.title}</div>
          <div class=\"text-sm muted\">${t.due_date ? 'Due ' + t.due_date : ''} ${t.room_id ? ' â€¢ ' + roomName(t.room_id) : ''}</div>
        </div>
      </div>
      <span class=\"px-2 py-1 rounded ${priorityClass} text-xs\">${t.priority}</span>
    </div>`;
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    msg.textContent = '';
    const fd = new FormData(form);
    const payload = Object.fromEntries(fd.entries());
    if (!payload.room_id) payload.room_id = null;
    const res = await fetch('/.netlify/functions/tasks-upsert', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify(payload) });
    if (res.ok) { form.reset(); await loadTasks(); msg.textContent = 'Added'; } else { msg.textContent = 'Error adding task'; }
  });

  filterStatus.addEventListener('change', loadTasks);
  filterRoom.addEventListener('change', loadTasks);

  await loadRooms();
  await loadTasks();
})();
</script>
