---
layout: layouts/base.njk
title: Room
permalink: /room/
---
<section class="card p-0 overflow-hidden">
  <div id="hero" class="relative w-full bg-gray-100 flex items-end" style="aspect-ratio: 16 / 9;">
    <div class="relative z-10 w-full bg-gradient-to-t from-black/60 to-transparent p-4">
      <h1 id="roomName" class="text-2xl sm:text-3xl font-semibold text-white"></h1>
      <p id="roomMeta" class="text-white/80"></p>
    </div>
  </div>
  <div class="p-4">
    <h3 class="text-lg font-semibold">Media</h3>
    <div id="media" class="mt-3 overflow-x-auto">
      <table class="min-w-full text-sm">
        <thead>
          <tr class="text-left text-gray-500">
            <th class="py-2">Preview</th>
            <th class="py-2">Title/Caption</th>
            <th class="py-2">Type</th>
            <th class="py-2">Open</th>
            <th class="py-2">Scan</th>
          </tr>
        </thead>
        <tbody id="mediaRows"></tbody>
      </table>
      <div id="scanPanel" class="mt-4 hidden">
        <div class="flex items-center justify-between">
          <h4 class="font-semibold">Scan suggestions</h4>
          <button id="rescanBtn" class="btn-secondary px-2 py-1">Rescan</button>
        </div>
        <p id="scanMsg" class="muted text-sm mb-2"></p>
        <div id="scanItems" class="grid gap-2 sm:grid-cols-2"></div>
      </div>
    </div>
  </div>
</section>
<section class="card mt-4">
  <div class="p-4">
    <h3 class="text-lg font-semibold">Table of Contents</h3>
    <div class="mt-2 flex items-center gap-2">
      <button class="btn-secondary" id="roomMicBtn">üéôÔ∏è Speak ToC line</button>
      <span id="roomMicStatus" class="muted text-sm"></span>
    </div>
    <ul id="tocList" class="mt-3 list-disc pl-5 text-sm"></ul>
  </div>
</section>
<section class="card mt-4">
  <div class="p-4">
    <h3 class="text-lg font-semibold">Add Item</h3>
    <div class="mt-3 grid gap-3 sm:grid-cols-4">
      <input id="assetName" placeholder="Name" class="rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500" />
      <select id="assetCategory" class="rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500">
        <option value="">Category</option>
        <option>Painting</option>
        <option>Objet d'art</option>
        <option>Picture frame</option>
        <option>Furniture</option>
        <option>Electronics</option>
        <option>Fixed fitting</option>
        <option>Lighting</option>
        <option>Rug/Carpet</option>
        <option>Textiles</option>
        <option>Appliance</option>
        <option>Decorative</option>
        <option>Tableware</option>
        <option>Book/Media</option>
        <option>Tools</option>
        <option>Other</option>
      </select>
      <input id="assetPrice" type="number" step="0.01" placeholder="Price" class="rounded-lg border-gray-300 focus:border-brand-500 focus:ring-brand-500" />
      <button id="assetSave" class="btn">Add</button>
    </div>
    <p id="assetMsg" class="muted text-sm mt-2"></p>
  </div>
</section>
<script>
(async function () {
  const params = new URLSearchParams(location.search);
  const id = params.get('id');
  if (!id) { document.getElementById('roomName').textContent = 'Missing id'; return; }

  // Load room basic info (single fetch for speed)
  const roomRes = await fetch(`/.netlify/functions/room-get?id=${encodeURIComponent(id)}`);
  if (roomRes.status === 401) { location.href = '/'; return; }
  if (!roomRes.ok) { document.getElementById('roomName').textContent = 'Error loading room'; return; }
  const room = await roomRes.json();
  if (!room) { document.getElementById('roomName').textContent = 'Room not found'; return; }
  document.getElementById('roomName').textContent = room.name;
  document.getElementById('roomMeta').textContent = [room.floor, room.dimensions].filter(Boolean).join(' ‚Ä¢ ');

  // Load media
  const mediaRes = await fetch(`/.netlify/functions/room-media-list?room_id=${encodeURIComponent(id)}`);
  if (mediaRes.status === 401) { location.href = '/'; return; }
  let photos = [];
  let documents = [];
  if (mediaRes.ok) {
    const data = await mediaRes.json();
    photos = data.photos || [];
    documents = data.documents || [];
  }

  // Hero image
  const hero = document.getElementById('hero');
  if (photos && photos.length) {
    const hp = photos.find(p => p.is_hero) || photos[0];
    const src = `/.netlify/functions/storage-proxy?bucket=photos&path=${encodeURIComponent(hp.storage_path)}`;
    hero.style.backgroundImage = `url(${src})`;
    hero.style.backgroundSize = 'cover';
    hero.style.backgroundPosition = 'center';
    const img = document.createElement('img');
    img.src = src;
    img.alt = room.name || 'Room photo';
    img.className = 'absolute inset-0 w-full h-full object-cover';
    hero.insertBefore(img, hero.firstChild);
  }

  // Render media rows
  const tbody = document.getElementById('mediaRows');
  const rows = [];
  for (const p of photos) {
    const thumb = `/.netlify/functions/storage-proxy?bucket=photos&path=${encodeURIComponent(p.storage_path)}`;
    rows.push(`<tr>
      <td class="py-2"><div class="w-28 bg-gray-100 rounded overflow-hidden" style="aspect-ratio:16/9;"><img src="${thumb}" class="w-full h-full object-cover" /></div></td>
      <td class="py-2">${p.caption || ''} ${p.is_hero ? '<span class=\'ml-2 text-xs text-emerald-700\'>(Hero)</span>' : ''}</td>
      <td class="py-2">Photo</td>
      <td class="py-2"><div class="flex items-center gap-2"><a class="btn-secondary px-2 py-1" target="_blank" href="${thumb}">Open</a><button class="btn-secondary px-2 py-1" data-hero="${p.id}">Set Hero</button></div></td>
      <td class="py-2"><button class="btn-secondary px-2 py-1" data-scan="${p.id}">Scan</button></td>
    </tr>`);
  }
  for (const d of documents) {
    const href = `/.netlify/functions/storage-proxy?bucket=docs&path=${encodeURIComponent(d.storage_path)}`;
    rows.push(`<tr>
      <td class="py-2">üìÑ</td>
      <td class="py-2">${d.title || 'Document'}</td>
      <td class="py-2">Document</td>
      <td class="py-2"><a class="btn-secondary px-2 py-1" target="_blank" href="${href}">Open</a></td>
      <td class="py-2"></td>
    </tr>`);
  }
  tbody.innerHTML = rows.join('') || '<tr><td class="py-3" colspan="5">No media yet. Upload a photo to enable Scan.</td></tr>';

  // Set hero handler
  tbody.querySelectorAll('button[data-hero]').forEach(btn => btn.addEventListener('click', async () => {
    const pid = btn.getAttribute('data-hero');
    const res = await fetch('/.netlify/functions/room-photo-set-hero', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ photo_id: pid, room_id: id }) });
    if (res.ok) location.reload(); else alert('Failed to set hero');
  }));

  // Scan + Rescan
  const scanPanel = document.getElementById('scanPanel');
  const scanMsg = document.getElementById('scanMsg');
  const scanItems = document.getElementById('scanItems');
  let currentScanPid = null;

  async function doScan(pid, force) {
    currentScanPid = pid;
    scanPanel.classList.remove('hidden');
    scanMsg.textContent = 'Scanning photo‚Ä¶';
    scanItems.innerHTML = '';
    const res = await fetch('/.netlify/functions/photo-scan-suggest', {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ photo_id: pid, room_id: id, force: !!force })
    });
    if (!res.ok) { scanMsg.textContent = 'Scan failed'; return; }
    const { items } = await res.json();
    if (!items || !items.length) { scanMsg.textContent = 'No items detected'; return; }
    scanMsg.textContent = 'Review and add items:';
    scanItems.innerHTML = items.map((it, idx) => {
      const conf = typeof it.confidence === 'number' ? ` ${(Math.round(it.confidence * 100))}%` : '';
      const cat = it.category || '';
      return `<div class="p-3 rounded-lg border border-gray-200 bg-white">
        <div class="font-medium">${it.name}</div>
        <div class="muted text-sm">${cat}${conf ? ' ‚Ä¢' + conf : ''}</div>
        <div class="mt-2 flex gap-2">
          <select data-cat="${idx}" class="rounded-lg border-gray-300 text-sm">
            <option value="">Category</option>
            <option>Painting</option>
            <option>Objet d'art</option>
            <option>Picture frame</option>
            <option>Furniture</option>
            <option>Electronics</option>
            <option>Appliance</option>
            <option>Lighting</option>
            <option>Textiles</option>
            <option>Decorative</option>
            <option>Tableware</option>
            <option>Tools</option>
            <option>Book/Media</option>
            <option>Rug/Carpet</option>
            <option>Fixed fitting</option>
            <option>Other</option>
          </select>
          <input data-price="${idx}" type="number" step="0.01" placeholder="Price" class="rounded-lg border-gray-300 text-sm" />
          <button class="btn px-2 py-1" data-add="${idx}">Add Asset</button>
        </div>
      </div>`;
    }).join('');
    scanItems.querySelectorAll('button[data-add]').forEach(btn => btn.addEventListener('click', async () => {
      const idx = btn.getAttribute('data-add');
      const it = items[Number(idx)];
      const catSel = scanItems.querySelector(`select[data-cat="${idx}"]`);
      const priceEl = scanItems.querySelector(`input[data-price="${idx}"]`);
      const body = {
        room_id: id,
        name: it.name,
        category: (catSel && catSel.value) || it.category,
        purchase_price: priceEl && priceEl.value ? Number(priceEl.value) : undefined,
      };
      const resp = await fetch('/.netlify/functions/assets-upsert', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify(body) });
      if (resp.ok) { btn.textContent = 'Added'; btn.setAttribute('disabled', 'true'); }
      else { alert('Failed to add'); }
    }));
  }

  tbody.querySelectorAll('button[data-scan]').forEach(btn => btn.addEventListener('click', async () => {
    const pid = btn.getAttribute('data-scan');
    await doScan(pid, false);
  }));
  document.getElementById('rescanBtn')?.addEventListener('click', async () => {
    if (currentScanPid) await doScan(currentScanPid, true);
  });

  // ToC list
  async function loadToc() {
    try {
      const ul = document.getElementById('tocList');
      const res = await fetch(`/.netlify/functions/room-toc-list?room_id=${encodeURIComponent(id)}`);
      if (!res.ok) { ul.innerHTML = '<li class="text-sm text-gray-500">Unable to load ToC</li>'; return; }
      const data = await res.json();
      const items = Array.isArray(data) ? data : [];
      if (!items.length) { ul.innerHTML = '<li class="text-sm text-gray-500">No entries yet</li>'; return; }
      ul.innerHTML = items.map(it => `<li>${(it.line || '').replace(/</g, '&lt;')}</li>`).join('');
    } catch { /* ignore */ }
  }
  await loadToc();

  // Mic capture for ToC
  const roomMicBtn = document.getElementById('roomMicBtn');
  const roomMicStatus = document.getElementById('roomMicStatus');
  function startMic() {
    (async () => {
      try {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) { roomMicStatus.textContent = 'Mic not supported'; return; }
        roomMicStatus.textContent = 'Recording‚Ä¶ click again to stop';
        const btn = roomMicBtn;
        if (btn) { btn.classList.add('!bg-orange-500','!text-black'); btn.textContent = 'Click to stop recording'; }
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const chunks = [];
        const rec = new MediaRecorder(stream);
        rec.ondataavailable = (e) => chunks.push(e.data);
        const stopped = new Promise(resolve => { rec.onstop = resolve; });
        const stop = () => { roomMicBtn.removeEventListener('click', stop); rec.stop(); stream.getTracks().forEach(t => t.stop()); };
        roomMicBtn.addEventListener('click', stop);
        rec.start();
        await stopped;
        roomMicStatus.textContent = 'Transcribing‚Ä¶';
        const audio = new Blob(chunks, { type: 'audio/webm' });
        const res = await fetch('/.netlify/functions/whisper-transcribe', { method: 'POST', headers: { 'content-type': audio.type || 'audio/webm', 'x-filename': 'speech.webm', 'x-base64': '0' }, body: audio });
        if (res.status === 401) { roomMicStatus.textContent = 'Please sign in'; return; }
        if (!res.ok) { roomMicStatus.textContent = 'Transcribe failed'; return; }
        const { text } = await res.json();
        if (!text) { roomMicStatus.textContent = 'No text'; return; }
        const addRes = await fetch('/.netlify/functions/room-toc-add', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ room_id: id, line: text }) });
        if (addRes.status === 401) { roomMicStatus.textContent = 'Please sign in'; return; }
        if (!addRes.ok) { roomMicStatus.textContent = 'Save failed'; return; }
        await loadToc();
        roomMicStatus.textContent = 'Added';
        if (btn) { btn.classList.remove('!bg-orange-500','!text-black'); btn.textContent = 'üéôÔ∏è Speak ToC line'; }
      } catch { roomMicStatus.textContent = 'Mic error'; }
    })();
  }
  roomMicBtn?.addEventListener('click', startMic);

  // Quick Add Item
  const assetSave = document.getElementById('assetSave');
  const assetMsg = document.getElementById('assetMsg');
  assetSave.addEventListener('click', async () => {
    const nameEl = document.getElementById('assetName');
    const catEl = document.getElementById('assetCategory');
    const priceEl = document.getElementById('assetPrice');
    const name = nameEl && 'value' in nameEl ? nameEl.value.trim() : '';
    const category = catEl && 'value' in catEl ? (catEl.value || undefined) : undefined;
    const priceStr = priceEl && 'value' in priceEl ? priceEl.value : '';
    const purchase_price = priceStr ? Number(priceStr) : undefined;
    if (!name) { assetMsg.textContent = 'Name required'; return; }
    try {
      const res = await fetch('/.netlify/functions/assets-upsert', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({ room_id: id, name, category, purchase_price }) });
      if (res.status === 401) { assetMsg.textContent = 'Please sign in'; return; }
      if (res.ok) {
        assetMsg.textContent = 'Added';
        if (nameEl && 'value' in nameEl) nameEl.value = '';
        if (priceEl && 'value' in priceEl) priceEl.value = '';
      } else {
        assetMsg.textContent = (await res.text()) || 'Error adding item';
      }
    } catch { assetMsg.textContent = 'Network error adding item'; }
  });
})();
</script>
